import {InjectNgOne,NgOne, Directive, Decorator, Component, Template} from './types';
import {ClassParser,ServiceParser,EmptyParser, ClassAnnotationsParser} from './classParser';
import {ComponentParser,TemplateParser,DecoratorParser} from './directiveParser';
import {isPresent} from 'angular2/facade/lang';

const isLoggingDebug = false; // for dev purpose


/**
 * Register to the angular application module all the directives, controllers, services that are dependencies
 * of the given class.
 * Based on class annotations (Ng2 Style) it will prepare injection and register tha class as a classic
 * angular 1.3.x module.
 *
 * Basically for a directive we got something like that:
 * ```
 * appModule.directive('helloApp', function(){
 *    return {
 *      restrict : 'E',
 *      controller:[ 'GreetingService', new HelloCmp(...args)]
 *    }
 * });
 * ```
 *
 * And for a service we got something like this:
 * ```
 * appModule.factory('GreetingService', [ 'serviceToInject', new GreetingService(...args) ]);
 * ```
 * (above examples are simplified for comprehension)
 *
 * @param appModule the application module returned by angular.module('myApp')
 * @param clazz the class to bootstrap
 */
export function bootstrap(appModule:Object, clazz:Function){
  new Ng2One(appModule).bootstrap(clazz);
  //window.ng2OneAppModule=appModule;
}


/**
 * Ng2One registers a class and its dependencies to angular 1.3.x
 */
export class Ng2One {
  appModule:Object;

  /**
   * Create a Ng2One instance
   *
   * @param appModule the application module returned by angular.module('myApp')
   */
  constructor(appModule:Object){
    this.appModule=appModule;
  }


  /**
   * Bootstrap a class and all its dependencies.
   * All dependencies except the one from angular 1.3.x (They should be done manually.)
   *
   * @param clazz the class to bootstrap
   */
  bootstrap(clazz:Function) {

    if(isPresent(clazz.ng1Name)){
      return;
    }

    var classParser = Ng2One.getParserForClass(clazz);
    for(let dependency of classParser.getAllDependencies()){
        this.bootstrap(dependency);
    }

    this.angularify(classParser);
  }

  /**
   * Register a factory function to angular.
   *
   * @param classParser the class parser.
   */
  angularify(classParser:ClassParser):void{
    // TODO: test if classParser.name is not already registered in angular
    if(classParser instanceof EmptyParser ===false){
      if(isLoggingDebug){
        console.debug('module.'+classParser.type+'("'+classParser.name+'",'+classParser.getInjectedFactory()+");");
      }
      this.appModule[classParser.type](classParser.name, classParser.getInjectedFactory());
    }
  }


  /**
   * Retrieves the appropriate class parser based on the class and its annotations.
   *
   * @param clazz the class to use to retrieve its parser.
   * @returns {ClassParser} the appropriate class parser
   */
  static getParserForClass(clazz:Function):ClassParser {
    var atParser = new ClassAnnotationsParser(clazz);
    var directive = atParser.getFirst(Directive);
    var parser;
    if (directive) {
      if (directive instanceof Component) {
        parser = new ComponentParser(clazz, directive);
      } else if (directive instanceof Template){
        parser = new TemplateParser(clazz, directive);
      } else if (directive instanceof Decorator) {
        parser = new DecoratorParser(clazz, directive);
      }
    }else{
      // We assume it's a Service. We'll do a basic injection based on types and @Inject
      // services from angular 1.3.x will have to be injected with @InjectNgOne('$log')
      try{
        parser = new ServiceParser(clazz);
      }catch(err){
        console.error("Not able to parse injection of "+clazz.name+" : "+err,err);
        parser = new EmptyParser(clazz);
      }
    }

    if(isLoggingDebug){
      console.debug("{method:'getParserForClass',\tclassName:'"+clazz.name+"',\tparserType:'"+parser.constructor.name+"'}");
    }
    return parser;
  }
}

