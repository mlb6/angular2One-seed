/**
 *
 * Types shared with angular 2.
 *
 * (except InjectNgOne which only exist in this project)
 *
 **/


/**
 * Annotation used to Inject services from angular 1.3.x
 *
 * Can be used like this:
 *
 * class Hello{
 *    logger:Object;
 *
 *    constructor(@InjectNgOne('$log') $log){
 *      this.logger=$log;
 *    }
 * }
 */
export class InjectNgOne {
  token:string;
  constructor(token:string) {
    this.token = token;
  }
}

/**
 * Annotation used to Inject services.
 *
 * Can be used like this:
 *
 * class Hello{
 *    logger:Logger;
 *
 *    constructor(@Inject(Logger) logger){
 *      this.logger=logger;
 *    }
 * }
 */
export class Inject {
  token:Function;
  constructor(token:Function) {
    this.token = token;
  }
}

/**
 * NgOne type. Used to identify ng1One injection.
 */
export class NgOne {};


export var Element = window.HTMLElement;
/**
 * NgElement can always be injected into directive. It provides the selected element.
 *
 *  $element[0] is now injected in NgElement.domElement
 */
export class NgElement extends NgOne {
  domElement:Element;
  constructor(domElement:Element) {
    this.domElement = domElement;
  }
}
NgElement.ng1Name='$element';

/**
 * NgScope is there only to be able to inject it. It should not be explicitly injected by the developer.
 */
export class NgScope extends NgOne {}
NgScope.ng1Name='$scope';




// The following code is an altered version of angular 2 core/annotations
// TODO: When support of named parameters is provided by traceur, file needs to be imported as module.

export class Directive {
  selector:any; //string;

  constructor(namedParameters){
    this.selector = namedParameters.selector;
  }

}

export class Component extends Directive {
  //TODO: vsavkin: uncomment it once the issue with defining fields in a sublass works
  template:any; //TemplateConfig;
  componentServices:any; //List;

  constructor(namedParameters){
    super({
      selector: namedParameters.selector
    });

    this.template = namedParameters.template;
    this.componentServices = namedParameters.componentServices;
  }
}

export class Decorator extends Directive {

  constructor(namedParameters) {
    super({
      selector: namedParameters.selector
    });
  }
}

export class Template extends Directive {

  constructor(namedParameters)
  {
    super({
      selector: namedParameters.selector
    });
  }
}

export class TemplateConfig {
  url:any; //string;
  inline:any; //string;
  directives:any; //List<Type>;


  constructor(namedParameters){
    this.url = namedParameters.url;
    this.inline = namedParameters.inline;
    this.directives = namedParameters.directives;
  }
}
